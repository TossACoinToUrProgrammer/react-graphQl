1.Устанавливаем зависимости: npm i express nodemon graphql express-graphql mongoose cors --save
--express  - фреймворк для node js, его каркас
--nodemon  - пакет нужен, чтобы при изменении настроек сервера, не приходилось перезапускать его вручную
--graphql  - библиотека запросов
--express  - graphql - упрощает работу с graphql
--mongoose - библиотека, которую мы используем для связки приложения с БД
--cors     - помогает делать запросы между различными источниками, кроссдоменные запросы
2.в app.js прописываем начальный конфиг, чтобы программа запускалась на порту 3005
3.добавим в package.json script     "dev": "nodemon server/app.js"
4.описываем схему данных с graphql в schema.js
5.внутри корневого запроса описываем все возможные подзапросы
6.построенную схему импортируем в app.js, и передаем в graphqlHTTP
7.graphiql - предостовляет UI в браузере для работы с запросами
8.в mlab создал базу данных, и ввел моковые значения в коллекции
9.создал папку models, где будут хранится модели(типы) коллекции, с использованием схем mongoose
10.законнектили созданного юзера с БД с mongoose.connect в app.js
11.Все запросы влияющие на БД описываются в Mutation

Добавляем UI

12.Скопировал компоненты из гитхаба курса
библиотеки:
--apollo-boost - это аполло клиент, служит для связки приложения с сервером
--react-apollo - прослойка между реакт и apollo
--graphql
--material-ui/core - фреймворк на котором написан UI
--material-ui/icons - иконки
--react-swipeable-views - пакет для плавного свайпа
--recompose - помогает оборачивать react компоненты в несколько хок-ов
13.добавили cors к конфигу. Позволяет делать кросдоменны запросы, т.к у нас сервер и фронт запущены на разных портах, 
без корс сервер бы не отвечал на запросы
14.добавляем ApolloClient и ApolloProvider в App.js(фронт)
15.в ApolloClient передаем конфиг сервера(его порт)

